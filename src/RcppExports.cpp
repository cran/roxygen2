// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// findEndOfTag
int findEndOfTag(std::string string, bool is_code);
RcppExport SEXP roxygen2_findEndOfTag(SEXP stringSEXP, SEXP is_codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type string(stringSEXP);
    Rcpp::traits::input_parameter< bool >::type is_code(is_codeSEXP);
    rcpp_result_gen = Rcpp::wrap(findEndOfTag(string, is_code));
    return rcpp_result_gen;
END_RCPP
}
// rdComplete
bool rdComplete(std::string string, bool is_code);
RcppExport SEXP roxygen2_rdComplete(SEXP stringSEXP, SEXP is_codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type string(stringSEXP);
    Rcpp::traits::input_parameter< bool >::type is_code(is_codeSEXP);
    rcpp_result_gen = Rcpp::wrap(rdComplete(string, is_code));
    return rcpp_result_gen;
END_RCPP
}
// leadingSpaces
IntegerVector leadingSpaces(CharacterVector lines);
RcppExport SEXP roxygen2_leadingSpaces(SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(leadingSpaces(lines));
    return rcpp_result_gen;
END_RCPP
}
// tokenise_block
List tokenise_block(CharacterVector lines, std::string file, int offset);
RcppExport SEXP roxygen2_tokenise_block(SEXP linesSEXP, SEXP fileSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(tokenise_block(lines, file, offset));
    return rcpp_result_gen;
END_RCPP
}
// find_includes
CharacterVector find_includes(std::string path);
RcppExport SEXP roxygen2_find_includes(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(find_includes(path));
    return rcpp_result_gen;
END_RCPP
}
// splitByWhitespace
std::vector<std::string> splitByWhitespace(std::string string);
RcppExport SEXP roxygen2_splitByWhitespace(SEXP stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type string(stringSEXP);
    rcpp_result_gen = Rcpp::wrap(splitByWhitespace(string));
    return rcpp_result_gen;
END_RCPP
}
// wrapString
std::string wrapString(std::string string, int width, int indent);
RcppExport SEXP roxygen2_wrapString(SEXP stringSEXP, SEXP widthSEXP, SEXP indentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type string(stringSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type indent(indentSEXP);
    rcpp_result_gen = Rcpp::wrap(wrapString(string, width, indent));
    return rcpp_result_gen;
END_RCPP
}
